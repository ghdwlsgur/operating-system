/* 프로그램의 진입점 boot 심볼로 지정, 프로그램이 시작될 때 가장 먼저 실행될 코드의 위치를 지정 */
ENTRY(boot)

/* 메모리 레이아웃 정의 (.text, .rodata, .data, .bss 순서대로 배치) */
SECTIONS {

  /* base address
    프로그램이 메모리에 로드될 시작 주소 */  
  . = 0x80200000;

  /* 프로그램의 코드(함수 등)가 저장되는 영역
   * 부트 코드를 보존하고 최적화 과정에서도 제거되지 않도록 함
   * 모든 소스 파일의 .text 섹션과 그 하위 섹션들을 수집 */
  .text :{
    KEEP(*(.text.boot));
    *(.text .text.*);    
  }

  /* 읽기 전용 상수 데이터가 저장되는 영역
   * 상수와 문자열 같은 읽기 전용 데이터가 4바이트 경계에 정렬하도록 지정 */
  .rodata : ALIGN(4) {
    *(.rodata .rodata.*);
  }

  /* 읽기/쓰기가 가능한 데이터가 저장되는 영역
   * 초기값이 있는 전역 변수들이 4바이트 경계에 정렬하도록 지정 */
  .data : ALIGN(4) {
    *(.data .data.*);
  }

  /* 초기값이 0인 읽기/쓰기가 가능한 데이터가 저장되는 영역
   * 현재 주소를 __bss 심볼에 저장 (시작을 알림)
   * .sbss는 작은 크기의 BSS 데이터를 위한 섹션 */
  .bss : ALIGN(4) {
    __bss = .;
    *(.bss .bss.* .sbss .sbss.*);
    __bss_end = .;
  }

  /* 현재 위치를 4바이트 경계에 정렬
   * 스택을 위해 128KB 공간을 할당
   * 스택의 최상단 주소를 __stack_top 심볼에 저장 */
  . = ALIGN(4);
  . += 128 * 1024; /* 128KB */
  __stack_top = .;


  /* 메모리 레이아웃 정의, 64MB 크기의 자유 RAM 영역을 4KB 정렬된 주소에서 시작
   * 현재 메모리 위치(.)를 4096 바이트(4KB) 경계에 맞춤
   * 현재 정렬된 위치를 __free_ram 심볼에 할당 */
  . = ALIGN(4096);
  __free_ram = .;
  . += 64 * 1024 * 1024; /* 64MB */
  __free_ram_end = .;
}